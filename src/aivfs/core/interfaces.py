from abc import ABC, abstractmethod
from pathlib import Path
from typing import Optional, Protocol, Any, List
from datetime import datetime
from .types import FileMetadata

class IMetadataManager(Protocol):
    """元数据管理器接口"""
    def add_file(self, metadata: FileMetadata) -> None: ...
    def get_file(self, path: str) -> Optional[FileMetadata]: ...
    def remove_file(self, path: str) -> None: ...
    def update_file(self, metadata: FileMetadata) -> None: ...
    def list_dir(self, path: str) -> List[FileMetadata]: ...
    def exists(self, path: str) -> bool: ...
    def close(self) -> None: ...
    def save(self) -> None: ...
    def load(self) -> None: ...

class IFSOperations(Protocol):
    """文件系统操作接口"""
    def create_file(self, path: str, content: str, owner: str, group: str, mode: tuple) -> None: ...
    def append_file(self, path: str, content: str) -> None: ...
    def read_file(self, path: str) -> str: ...
    def write_file(self, path: str, content: str) -> None: ...
    
    def mkdir(self, path: str, owner: str, group: str, mode: tuple, 
             parents: bool, exist_ok: bool) -> None: ...
    def makedirs(self, path: str, owner: str, group: str, mode: tuple,
                exist_ok: bool) -> None: ...
    
    def copy(self, src: str, dst: str) -> None: ...
    def copytree(self, src: str, dst: str, symlinks: bool, 
                ignore: Any, dirs_exist_ok: bool) -> None: ...
    def move(self, src: str, dst: str) -> None: ...
    
    def remove(self, path: str) -> None: ...
    def rmtree(self, path: str, ignore_errors: bool) -> None: ...
    
    def exists(self, path: str) -> bool: ...
    def is_file(self, path: str) -> bool: ...
    def is_dir(self, path: str) -> bool: ...
    def get_metadata(self, path: str) -> Optional[FileMetadata]: ...
    def list_dir(self, path: str) -> List[str]: ...